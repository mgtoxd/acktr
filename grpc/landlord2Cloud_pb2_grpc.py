# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import landlord2Cloud_pb2 as landlord2Cloud__pb2


class ACKTRStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDem = channel.stream_unary(
                '/prot.ACKTR/GetDem',
                request_serializer=landlord2Cloud__pb2.DemandInfoList.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.Hash.FromString,
                )


class ACKTRServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDem(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ACKTRServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDem': grpc.stream_unary_rpc_method_handler(
                    servicer.GetDem,
                    request_deserializer=landlord2Cloud__pb2.DemandInfoList.FromString,
                    response_serializer=landlord2Cloud__pb2.Hash.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'prot.ACKTR', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ACKTR(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDem(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/prot.ACKTR/GetDem',
            landlord2Cloud__pb2.DemandInfoList.SerializeToString,
            landlord2Cloud__pb2.Hash.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CacheStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFile = channel.unary_unary(
                '/prot.Cache/GetFile',
                request_serializer=landlord2Cloud__pb2.Hash.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.File.FromString,
                )
        self.ValidationCacheNode = channel.unary_unary(
                '/prot.Cache/ValidationCacheNode',
                request_serializer=landlord2Cloud__pb2.ShakeHands.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.ShakeHands.FromString,
                )
        self.ProxyChange = channel.unary_unary(
                '/prot.Cache/ProxyChange',
                request_serializer=landlord2Cloud__pb2.ChangesStorage.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.ChangesStorage.FromString,
                )
        self.GetDemand = channel.stream_unary(
                '/prot.Cache/GetDemand',
                request_serializer=landlord2Cloud__pb2.Demand.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.Demand.FromString,
                )
        self.CalDelayChange = channel.unary_unary(
                '/prot.Cache/CalDelayChange',
                request_serializer=landlord2Cloud__pb2.ChangesDelay.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.ChangesDelay.FromString,
                )


class CacheServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFile(self, request, context):
        """获取文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidationCacheNode(self, request, context):
        """发现缓存节点
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProxyChange(self, request, context):
        """缓存节点文件变动
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDemand(self, request_iterator, context):
        """需求共享
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalDelayChange(self, request, context):
        """计算延迟变动
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CacheServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=landlord2Cloud__pb2.Hash.FromString,
                    response_serializer=landlord2Cloud__pb2.File.SerializeToString,
            ),
            'ValidationCacheNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidationCacheNode,
                    request_deserializer=landlord2Cloud__pb2.ShakeHands.FromString,
                    response_serializer=landlord2Cloud__pb2.ShakeHands.SerializeToString,
            ),
            'ProxyChange': grpc.unary_unary_rpc_method_handler(
                    servicer.ProxyChange,
                    request_deserializer=landlord2Cloud__pb2.ChangesStorage.FromString,
                    response_serializer=landlord2Cloud__pb2.ChangesStorage.SerializeToString,
            ),
            'GetDemand': grpc.stream_unary_rpc_method_handler(
                    servicer.GetDemand,
                    request_deserializer=landlord2Cloud__pb2.Demand.FromString,
                    response_serializer=landlord2Cloud__pb2.Demand.SerializeToString,
            ),
            'CalDelayChange': grpc.unary_unary_rpc_method_handler(
                    servicer.CalDelayChange,
                    request_deserializer=landlord2Cloud__pb2.ChangesDelay.FromString,
                    response_serializer=landlord2Cloud__pb2.ChangesDelay.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'prot.Cache', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cache(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prot.Cache/GetFile',
            landlord2Cloud__pb2.Hash.SerializeToString,
            landlord2Cloud__pb2.File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidationCacheNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prot.Cache/ValidationCacheNode',
            landlord2Cloud__pb2.ShakeHands.SerializeToString,
            landlord2Cloud__pb2.ShakeHands.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProxyChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prot.Cache/ProxyChange',
            landlord2Cloud__pb2.ChangesStorage.SerializeToString,
            landlord2Cloud__pb2.ChangesStorage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDemand(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/prot.Cache/GetDemand',
            landlord2Cloud__pb2.Demand.SerializeToString,
            landlord2Cloud__pb2.Demand.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalDelayChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prot.Cache/CalDelayChange',
            landlord2Cloud__pb2.ChangesDelay.SerializeToString,
            landlord2Cloud__pb2.ChangesDelay.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CloudStub(object):
    """rpc GetFileList(Point) returns (Feature) {}
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFile = channel.unary_unary(
                '/prot.Cloud/GetFile',
                request_serializer=landlord2Cloud__pb2.Hash.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.File.FromString,
                )
        self.GetFileList = channel.unary_stream(
                '/prot.Cloud/GetFileList',
                request_serializer=landlord2Cloud__pb2.File.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.FileInfo.FromString,
                )
        self.GetCalSpeed = channel.unary_unary(
                '/prot.Cloud/GetCalSpeed',
                request_serializer=landlord2Cloud__pb2.File.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.Speed.FromString,
                )
        self.FeedbackDelay = channel.unary_unary(
                '/prot.Cloud/FeedbackDelay',
                request_serializer=landlord2Cloud__pb2.DelayInfo.SerializeToString,
                response_deserializer=landlord2Cloud__pb2.File.FromString,
                )


class CloudServicer(object):
    """rpc GetFileList(Point) returns (Feature) {}
    """

    def GetFile(self, request, context):
        """获取文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileList(self, request, context):
        """获取文件列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCalSpeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeedbackDelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=landlord2Cloud__pb2.Hash.FromString,
                    response_serializer=landlord2Cloud__pb2.File.SerializeToString,
            ),
            'GetFileList': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFileList,
                    request_deserializer=landlord2Cloud__pb2.File.FromString,
                    response_serializer=landlord2Cloud__pb2.FileInfo.SerializeToString,
            ),
            'GetCalSpeed': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalSpeed,
                    request_deserializer=landlord2Cloud__pb2.File.FromString,
                    response_serializer=landlord2Cloud__pb2.Speed.SerializeToString,
            ),
            'FeedbackDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.FeedbackDelay,
                    request_deserializer=landlord2Cloud__pb2.DelayInfo.FromString,
                    response_serializer=landlord2Cloud__pb2.File.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'prot.Cloud', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cloud(object):
    """rpc GetFileList(Point) returns (Feature) {}
    """

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prot.Cloud/GetFile',
            landlord2Cloud__pb2.Hash.SerializeToString,
            landlord2Cloud__pb2.File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFileList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/prot.Cloud/GetFileList',
            landlord2Cloud__pb2.File.SerializeToString,
            landlord2Cloud__pb2.FileInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCalSpeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prot.Cloud/GetCalSpeed',
            landlord2Cloud__pb2.File.SerializeToString,
            landlord2Cloud__pb2.Speed.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeedbackDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/prot.Cloud/FeedbackDelay',
            landlord2Cloud__pb2.DelayInfo.SerializeToString,
            landlord2Cloud__pb2.File.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
